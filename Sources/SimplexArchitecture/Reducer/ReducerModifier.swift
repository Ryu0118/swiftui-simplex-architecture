import Foundation
import Dependencies

public protocol _ReducerModifier<Base> {
    associatedtype Base: ReducerProtocol
    var base: Base { get }
    func reduce(into state: StateContainer<Base.Target>, action: Base.Action) -> SideEffect<Base>
    /// Evolve the current state of ActionSendable to the next state.
    ///
    /// - Parameters:
    ///   - state: Current state of ActionSendable and ReducerState. ReducerState can be accessed from the `reducerState` property of State..
    ///   - action: A ReducerAction that can change the state of View and ReducerState.
    /// - Returns: An `SideEffect` representing the side effects generated by the reducer.
    func reduce(into state: StateContainer<Base.Target>, action: Base.ReducerAction) -> SideEffect<Base>
}

public extension _ReducerModifier {
    @inlinable
    func reduce(
        into state: StateContainer<Base.Target>,
        action: CombineAction<Base>
    ) -> SideEffect<Base> {
        switch action.kind {
        case let .viewAction(action):
            reduce(into: state, action: action)

        case let .reducerAction(action):
            reduce(into: state, action: action)
        }
    }
}
