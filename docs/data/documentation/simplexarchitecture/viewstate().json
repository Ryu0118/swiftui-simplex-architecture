{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"attribute","text":"@attached"},{"kind":"text","text":"(member, names: named(ViewState)) "},{"kind":"attribute","text":"@attached"},{"kind":"text","text":"(extension, conformances: "},{"kind":"typeIdentifier","identifier":"doc:\/\/SimplexArchitecture\/documentation\/SimplexArchitecture\/ActionSendable","preciseIdentifier":"s:19SimplexArchitecture14ActionSendableP","text":"ActionSendable"},{"kind":"text","text":") "},{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"ViewState"},{"kind":"text","text":"()"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"anchor":"overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"It is conformed to the "},{"type":"codeVoice","code":"ActionSendable"},{"type":"text","text":" protocol by the "},{"type":"codeVoice","code":"ViewState"},{"type":"text","text":" macro."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here is a example code."}]},{"type":"codeListing","syntax":null,"code":["@ViewState","struct MyView: View {","    let store: Store<MyReducer> = Store(reducer: MyReducer())","","    var body: some View {","        Text(\"MyView\")","    }","}","@Reducer","struct MyReducer {","    enum ViewAction {","        case someAction","    }","","    @Dependency(\\.authRepository) var authRepository","    @Dependency(\\.selfRepository) var selfRepository","","    func reduce(into state: StateContainer<MyView>, action: Action) -> SideEffect<MyReducer> {","        switch action {","        case .someAction:","            return .none","        }","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here is a sample code if you want to use ReducerState."}]},{"type":"codeListing","syntax":null,"code":["@ViewState","struct MyView: View {","    let store: Store<MyReducer>","","    init() {","        store = Store(reducer: MyReducer(), initialReducerState: .init(counter: 0))","    }","","    var body: some View {","        Text(\"MyView\")","            .onTapGesture {","                send(.someAction)","            }","    }","}","@Reducer","struct MyReducer {","    enum ViewAction {","        case someAction","    }","","    struct ReducerState {","        var counter: Int","    }","","    func reduce(into state: StateContainer<MyView>, action: Action) -> SideEffect<MyReducer> {","        switch action {","        case .someAction:","            state.reducerState.counter += 1","            return .none","        }","    }","}"]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/simplexarchitecture\/viewstate()"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/SimplexArchitecture\/documentation\/SimplexArchitecture\/ViewState()","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Macro to create ViewState struct by extracting properties to which property wrappers such as @State, @Binding @Published, etc. are applied."}],"kind":"symbol","metadata":{"fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"ViewState"},{"kind":"text","text":"()"}],"title":"ViewState()","roleHeading":"Macro","role":"symbol","symbolKind":"macro","externalID":"s:19SimplexArchitecture9ViewStateyycfm","modules":[{"name":"SimplexArchitecture"}]},"hierarchy":{"paths":[["doc:\/\/SimplexArchitecture\/documentation\/SimplexArchitecture"]]},"references":{"doc://SimplexArchitecture/documentation/SimplexArchitecture/ViewState()":{"role":"symbol","title":"ViewState()","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"ViewState"},{"kind":"text","text":"()"}],"abstract":[{"type":"text","text":"Macro to create ViewState struct by extracting properties to which property wrappers such as @State, @Binding @Published, etc. are applied."}],"identifier":"doc:\/\/SimplexArchitecture\/documentation\/SimplexArchitecture\/ViewState()","kind":"symbol","type":"topic","url":"\/documentation\/simplexarchitecture\/viewstate()"},"doc://SimplexArchitecture/documentation/SimplexArchitecture/ActionSendable":{"role":"symbol","title":"ActionSendable","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ActionSendable"}],"abstract":[{"type":"text","text":"A protocol for  send actions to a store."}],"identifier":"doc:\/\/SimplexArchitecture\/documentation\/SimplexArchitecture\/ActionSendable","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ActionSendable"}],"url":"\/documentation\/simplexarchitecture\/actionsendable"},"doc://SimplexArchitecture/documentation/SimplexArchitecture":{"role":"collection","title":"SimplexArchitecture","abstract":[],"identifier":"doc:\/\/SimplexArchitecture\/documentation\/SimplexArchitecture","kind":"symbol","type":"topic","url":"\/documentation\/simplexarchitecture"}}}